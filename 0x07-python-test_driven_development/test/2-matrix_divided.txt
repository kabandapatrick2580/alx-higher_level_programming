"""
Test cases for matrix_divided module
=====================================

Divide all elements of a matrix by a given divisor.

Usage
=====

Importing from module:
    >>> matrix_divided = __import__('your_module_name').matrix_divided

Dividing a matrix by a positive integer divisor:
    >>> matrix_divided([[4, 8], [12, 6]], 2)
    [[2.0, 4.0], [6.0, 3.0]]

Dividing a matrix by a negative float divisor:
    >>> matrix_divided([[10, 20], [30, 40]], -2.5)
    [[-4.0, -8.0], [-12.0, -16.0]]

Dividing a matrix with all elements as floats by 1:
    >>> matrix_divided([[1.5, 2.5], [3.0, 4.0]], 1)
    [[1.5, 2.5], [3.0, 4.0]]

Dividing a matrix by 0 (ZeroDivisionError expected):
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Passing a non-matrix argument (TypeError expected):
    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix with rows of different sizes (TypeError expected):
    >>> matrix_divided([[1, 2], [3, 4, 5]], 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Passing a non-numeric divisor (TypeError expected):
    >>> matrix_divided([[1, 2], [3, 4]], '2')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number (integer or float)

Dividing a matrix by NaN (ValueError expected):
    >>> matrix_divided([[1, 2], [3, float('nan')]], 2)
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer
"""
